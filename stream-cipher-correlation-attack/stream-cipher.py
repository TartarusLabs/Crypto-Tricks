#!/usr/bin/env python2

# Implementation of a stream cipher
# https://github.com/TartarusLabs/Crypto-Tricks/stream-cipher-correlation-attack/
# james.fell@alumni.york.ac.uk


from bitstring import BitArray

# Set how many bits of keystream we would like to generate when the script is executed
keybits = 2000

# Define the boolean function as simply an array of results which can be used for lookups
boolean_outputs = [1,1,0,1,0,1,1,0,1,0,0,0,1,1,0,0]


# Function to create a specific LFSR and clock it a specific number of times, storing the resulting bit stream in a BitArray
def register(tap_sequence, initial_bits, clock_cycles):

	# Initialise the LFSR
	lfsr = initial_bits

	# Initialise output_bits to be a BitArray of zeroes with length equal to the number of clock cycles requested
	output_bits = '0' * clock_cycles
	output_bits = BitArray(bin=output_bits)

	# Clock the LFSR the requested number of times
	for cycle in range(0, clock_cycles):

		# tapped is the result of XORing together all the bits specified by the tap sequence
		tapped = 0
        	for tap in tap_sequence:
   			tapped = tapped ^ lfsr[tap-1]

		# Add the rightmost bit of the LFSR to the output
		output_bits[cycle] = lfsr[initial_bits.len-1]

		# Shift the LFSR right one bit, discarding the already saved rightmost bit
		lfsr >>= 1

		# Overwrite the leftmost bit of the LFSR with the result of the earlier tap operation
		lfsr[0] = tapped

	# Return the BitArray of all the output bits we saved from the LFSR
	return output_bits


# Function to implement the boolean function from our stream cipher specification. 
# This is really as simple as using the 4 bit input as an index into an array and looking up the output.
def boolean_function(bit1, bit2, bit3, bit4):
	input_num = BitArray('bin='+str(bit1)+str(bit2)+str(bit3)+str(bit4))
	return boolean_outputs[input_num.uint]


# Clock each of the 4 LFSRs keybits times
lfsr1 = register([4,7], BitArray('uint:7=27'), keybits)
lfsr2 = register([3,8,9,11], BitArray('uint:11=474'), keybits)
lfsr3 = register([8,11,12,13], BitArray('uint:13=991'), keybits)
lfsr4 = register([14,15], BitArray('uint:15=3254'), keybits)


# Apply the boolean function to the saved LFSR outputs
stream_key = '0' * keybits
stream_key = BitArray(bin=stream_key)

for cycle in range(0, keybits):
	stream_key[cycle] = boolean_function(lfsr1.bin[cycle], lfsr2.bin[cycle], lfsr3.bin[cycle], lfsr4.bin[cycle])

# Print out the keybits generated by the combining function
print "Keybits: " + stream_key.bin

